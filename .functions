#!/bin/bash

# rename multimedia images, videos, audios with exiftool to date time format
function rename-multimedia() {
  r=$'\e[31m'  nl=$'\n'  n=$'\e[0m' folder=${@:-.}  
  read -r -p "${r}Rename all multimedia files in '$(realpath $folder)'${nl}${n}Are you sure? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
  then
    exiftool -r -m -d "%Y-%m-%d %H.%M.%S%%-c.%%le" \
      "-filename<FileInodeChangeDate" "-filename<ModifyDate" "-filename<CreateDate" "-filename<CreationDate" "-filename<DateTimeOriginal" \
      -if '$filename !~ /^\./' \
      -ext jpg -ext jpeg  -ext png -ext gif -ext tif -ext tiff \
      -ext mp4 -ext avi -ext mov -ext mkv -ext m4v \
      -ext cr2 -ext crw \
      -ext nef -ext nrw \
      -ext arw -ext srf -ext sr2 \
      -ext raw -ext rw2 \
      -ext raf \
      -ext orf \
      "$folder"
    fi
}

# Rename all files in folder to sequential filenames
function rename-sequenced() {
  r=$'\e[31m'  nl=$'\n'  n=$'\e[0m' files=$(ls -1 | wc -l)
  read -r -p "${r}All ${files} files in folder '$(pwd)' will be sequentially renamed${nl}${n}Are you sure? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
  then
    rename --counter-format 000001 --lower-case --keep-extension --expr='$_ = "$N" if @EXT' *
  fi
}

# Clean up drive before unmount
function cleandrive() {
  if [ -n "$1" ] && [ -d "/Volumes/$1/" ]; then
    read -r -p "Clean /Volumes/$1/ and unmount? [y/N] " response
      if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        find "/Volumes/$1/" -name "._*" -type f -delete
        find "/Volumes/$1/" -name "*.DS_Store" -type f -ls -delete
        rm -rf "/Volumes/$1/.Spotlight-V100/"
        rm -rf "/Volumes/$1/.Trashes/"
        diskutil unmount "/Volumes/$1/"
        echo "Done..."
      fi
  else
    echo "Drive '$1' missing"
  fi
}


# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# Base64 encode file
function b64() {
        local mimeType=$(file -b --mime-type "$1")
        if [[ $mimeType == text/* ]]; then
                mimeType="${mimeType};charset=utf-8"
        fi
        echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Return current ip4 / ip6 address
function myip() {
  echo "IP4: `dig @resolver1.opendns.com A myip.opendns.com +short -4`"
  echo "IP6: `dig @resolver1.opendns.com AAAA myip.opendns.com +short -6`"
  echo "LOCAL: $(ipconfig getifaddr en1)"
}

# Backup git to bundle
# $ git_backup git@github.com:OzzyCzech/dotfiles.git ~/Downloads/
function git_backup() {	
	target=$(echo ${1#*:} | tr / _)		
	git clone --mirror $1 ${target} && cd ${target}
	git bundle create ${2-../}/${target%%.git}.bundle --all
	cd - && rm -rf ${target}
}